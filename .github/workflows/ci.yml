name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [published]

jobs:
  # Multi-OS testing and validation
  test:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        dotnet-version: ['9.0.x']

    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET ${{ matrix.dotnet-version }}
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ matrix.dotnet-version }}

    - name: Restore dependencies
      run: dotnet restore

    - name: Build solution
      run: dotnet build --no-restore --configuration Release

    - name: Run tests
      run: dotnet test --no-build --configuration Release --verbosity normal

    - name: Run examples
      run: |
        cd src/Examples
        dotnet run --configuration Release

    - name: Upload coverage reports
      if: matrix.os == 'ubuntu-latest'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # Package creation and validation (only on main branch pushes)
  package:
    name: Create NuGet Package
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET 9.0.x
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Restore dependencies
      run: dotnet restore

    - name: Build solution
      run: dotnet build --configuration Release --no-restore

    - name: Run tests (package validation)
      run: dotnet test --configuration Release --no-build

    - name: Create NuGet package
      run: dotnet pack --configuration Release --no-build --output nupkgs

    - name: Upload package artifact
      uses: actions/upload-artifact@v4
      with:
        name: nupkg-${{ github.run_number }}
        path: nupkgs/
        retention-days: 30

  # Publish to NuGet (only on release)
  publish:
    name: Publish to NuGet
    needs: package
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'

    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET 9.0.x
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Restore dependencies
      run: dotnet restore

    - name: Build solution
      run: dotnet build --configuration Release --no-restore

    - name: Run tests (pre-publish validation)
      run: dotnet test --configuration Release --no-build

    - name: Create NuGet package
      run: dotnet pack --configuration Release --no-build --output nupkgs

    - name: Publish to NuGet
      run: |
        cd nupkgs
        for package in *.nupkg; do
          if [[ $package != *.symbols.nupkg ]]; then
            echo "Publishing $package to NuGet..."
            dotnet nuget push "$package" --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json
          fi
        done

    - name: Comment on release
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.payload.release.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: 'âœ… **ZiggyMath ${{ github.event.release.tag_name }}** has been successfully published to NuGet!\n\nðŸ“¦ **Installation:**\n```bash\ndotnet add package ZiggyMath\n```\n\nðŸ”— **Package:** https://www.nuget.org/packages/ZiggyMath/${{ github.event.release.tag_name }}'
          })

  # Performance benchmarks (only on main branch pushes)
  benchmark:
    name: Performance Benchmarks
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET 9.0.x
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Restore dependencies
      run: dotnet restore

    - name: Build solution
      run: dotnet build --configuration Release --no-restore

    - name: Run performance benchmarks
      run: |
        echo "Performance benchmarks would run here"
        echo "This would include timing tests for key algorithms"
        echo "Matrix operations, FFT performance, statistical computations"

    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results-${{ github.run_number }}
        path: benchmark-results/
